####################### 程序系统配置 ###############################
# Kerberos的krb5.conf配置文件路径
#java.security.krb5.conf=/bigdata/keytabs/krb5.conf
java.security.krb5.conf=A:\\keytabs\\krb5.conf
# Java验证和授权服务的配置文件路径（Solr、Kafka开启Kerberos后需要）
#java.security.auth.login.config=/bigdata/keytabs/jaas.conf
java.security.auth.login.config=A:\\keytabs\\jaas.conf
javax.security.auth.useSubjectCredsOnly=false
# 是否开启Kerberos认证的debug信息
sun.security.krb5.debug=false
# 为true时允许客户端使用简单认证模式
ipc.client.fallback-to-simple-auth-allowed=true

######################## 页面下载相关配置 ###############################
# 下载（异步）超时时间（毫秒）（默认：600000，十分钟）
download.timeout.ms=600000
# 下载查看状态间隔时间（毫秒）（默认：1000）
download.sleep.time.ms=1000

######################## 运行队列相关配置 ###############################
# 非管理员用户异步任务的线程数(默认：100)
thread.pool.size=100

####################### 等待队列配置相关 ############################
# 等待队列中判断的时间间隔（同步/毫秒）
sync.cycle.time.interval=10
# 等待队列中判断的时间间隔（异步/毫秒）
async.cycle.time.interval=100
# 没有设置等待超时时间时的超时时间（同步/秒）（默认：60，一分钟）
max.sync.wait.timeout=60
# 没有设置等待超时时间时的超时时间（异步/秒）（默认：600，十分钟）
max.async.wait.timeout=600

######################## Socket服务相关配置（对外提供Socket方式的消费接口） ###############################
# Socket服务连接的端口号(使用前请检查端口是否被占用)（默认：9089）
socket.port=9089
# 主线程数，用于处理连接请求和建立连接（默认：1（一个线程）） 值范围：0或n
boss.group.threads=1
# 工作线程，在连接建立之后处理IO请求（默认：0（2*CPU核数）） 值范围：0或n
work.group.threads=0
# 业务线程，在连接建立之后处理业务请求（默认：-1（关闭）） 值范围：-1、0或n
busi.group.threads=-1

######################## 拦截器相关配置 ###############################
# 消费状态允许查询的间隔时间（毫秒）（默认：1000）
consume.status.allow.interval.time.ms=1000

######################## FTP相关配置（异步消费时会生成文件上传FTP服务器） ###############################
# 是否自动创建FTP用户（true/false）（默认：true）
# 如果不允许自动创建ftp用户，则无论任何用户使用异步消费都使用如下默认的FTP用户上传
auto.create.ftp.user=false

# FTP的配置信息
ftp.hostname=192.168.1.61
ftp.port=21
ftp.username=UDSP
ftp.password=000000
ftp.rootpath=/home/ftp

# 自动创建、更新、删除FTP用户所需要的FTP服务器的root用户和密码
# 以下参数在auto.create.ftp.user=true时生效
host.username=root
host.password=

# 异步生成批量文件信息
data.file.suffix=.dat
flg.file.suffix=.log
data.file.delimiter=\\036
flg.file.delimiter=|

######################## 部署相关配置 ###############################
# 服务模式（single、cluster）（默认：single）
service.mode=single

######################## 是否严格控制并发 ###############################
# 是否严格的控制分布式并发（true、false）（默认：true）
cluster.concurrency.control=true

######################## 心跳相关配置（service.mode=cluster时才会生效） ###############################
# 发送本服务心跳的任务间隔（默认：*/20 * * * * ?）
send.local.heartbeat.task=*/20 * * * * ?
# 检查集群服务心跳的任务间隔（默认：*/30 * * * * ?）
check.cluster.heartbeat.task=*/30 * * * * ?
# 心跳误差阀值(毫秒)【必须大于心跳间隔时间】（默认：60000）
check.cluster.heartbeat.time.ms=60000

######################## 缓存相关配置 ###############################
# 缓存模式（ehcache、redis）（默认：ehcache）
# service.mode=single时建议使用ehcache，service.mode=cluster时建议使用redis
cache.mode=ehcache

######################## Redis相关配置（cache.mode=redis时才会生效） ###############################
redis.host=172.18.21.61
redis.port=6380

###### redis资源池配置 ######
# 最大空间实例数
redis.maxIdle=20000
# 最大活跃实例数
redis.maxTotal=40000
# 创建实例时最长等待时间
redis.maxWaitMillis=1000
# 创建实例时是否验证
redis.testOnBorrow=true

######################## EhCache相关配置（cache.mode=ehcache时才会生效） ###############################
# EhCache的配置文件路径（必填）
ehcache.path=classpath:goframe/common/ehcache.xml

######################## Local Cache相关配置（cache.mode=local时才会生效） ###############################
# 本地缓存最大对象数（默认：100000）
local.cache.maximum.size=100000
# 本地缓存访问后过期的时间（毫秒）（默认：3600000）
local.cache.expire.after.access.time.ms=3600000

####################### 临时文件删除配置 ###############################
# 每周周三的两点半进行清理(默认：0 30 2 ? * WED)
download.tempfile.clean.task=0 30 2 ? * WED
# 清理N天前的数据，即保留最近N天数据(默认：7)
download.tempfile.clean.days=7
# 临时文件本地存储目录
# 默认为空，则存储在项目下的TEMP_DOWNLOAD目录，否则存在在指定目录下
temp.file.local.dir=

####################### 模型相关配置 ###############################
# 模型调度最大返回记录数
udsp.mm.return.maxnum=10000

####################### 交互建模的实时作业相关配置 ###############################
# 异常或停止的作业信息踢除阀值(秒)(默认：86400)
realtime.jobinfo.timeout=86400
# 检查实时作业状态的表达式(默认：0/2 * * * * ?)
check.realtime.status.cron.expression=0/2 * * * * ?
# 检查实时作业存活的表达式(默认：0 */5 * * * ?)
check.realtime.live.cron.expression=0 */5 * * * ?

# 清空过时实时作业信息的表达式(默认：0 0 0 * * ?)
clean.realtime.outmoded.cron.expression=0 0 0 * * ?
# 保留最近N天的批量作业信息（默认：30）
keep.realtime.task.period=30

####################### 交互建模的批量作业相关配置 ###############################
# 清空过时批量作业信息的表达式(默认：0 0 0 * * ?)
clean.batch.outmoded.cron.expression=0 0 0 * * ?
# 保留最近N天的批量作业信息（默认：30）
keep.batch.task.period=30

####################### 清理消费日志相关配置 ###############################
# 清空消费日志的表达式(默认：0 0 0 * * ?)
clean.consume.log.cron.expression=0 0 0 * * ?
# 保留最近N天的消费日志（默认：100）
keep.consume.log.period=100

####################### 清理H2数据相关配置 ###############################
# 1、Stores data in file system
aggregator.h2.url=jdbc:h2:~/H2Data/udsp;AUTO_SERVER=TRUE;LOG=0;UNDO_LOG=0
# 2、Stores data outside of the VM's heap - useful for large memory DBs without incurring GC costs.
#aggregator.h2.url=jdbc:h2:nioMemFS:udsp;LOG=0;UNDO_LOG=0
# 清空h2数据的表达式(默认：0 1 0 * * ?)
aggregator.h2.clean.expression=0 1 0 * * ?
# h2数据保留时间（秒）(默认：43200)
aggregator.h2.data.timeout=43200